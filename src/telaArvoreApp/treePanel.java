/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telaArvoreApp;

import datastructure.Arvore;
import datastructure.No;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;

/**
 *
 * @author jbcnrlz
 */
public class treePanel extends javax.swing.JPanel {

    private int nodeSize = 50;
    private Font textFont = new Font("Arial", Font.BOLD, 12);
    private Arvore innerTree;
    
    /**
     * Creates new form treePanel
     */
    public treePanel(Arvore a) {        
        initComponents();
        this.innerTree = a;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void drawNode(Graphics g,No n,int x, int y, int level){        
        Graphics2D g2d = (Graphics2D) g;
        g.setColor(Color.WHITE);
        //Ellipse2D.Double circle = new Ellipse2D.Double( ( (this.getWidth() / 2) - (this.nodeSize / 2) ) + (type * level), 5 + (level * 5), this.nodeSize,this.nodeSize);
        Ellipse2D.Double circle = new Ellipse2D.Double( x, y, this.nodeSize,this.nodeSize);
        g2d.fill(circle);
        
        String text = Integer.toString(n.getNumero());
        g.setColor(Color.BLACK);
        g.setFont(this.textFont);
        g.drawString(text,(int) circle.getCenterX() - this.textFont.getSize(), (int) circle.getCenterY());        
        
        if (n.getDireito() != null){
            g.drawLine((int) circle.getCenterX(),(int) circle.getCenterY(), (int) circle.getCenterX() + (this.nodeSize + (100 - (60*level)) ), (int) circle.getCenterY() + (this.nodeSize + 5));
            this.drawNode(g, n.getDireito(), x + (this.nodeSize + (100 - (60*level)) ), y + (this.nodeSize + 5),level + 1);
        }
        if (n.getEsquerdo() != null){
            g.drawLine((int) circle.getCenterX(),(int) circle.getCenterY(), (int) circle.getCenterX() - (this.nodeSize + (100 - (60*level))), (int) circle.getCenterY() + (this.nodeSize + 5));
            this.drawNode(g, n.getEsquerdo(), x - (this.nodeSize + (100 - (60*level))), y + (this.nodeSize + 5),level + 1);
        }
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (this.innerTree.getRaiz() != null){
            this.drawNode(g, this.innerTree.getRaiz(), (this.getWidth() / 2) - (this.nodeSize / 2), 5,0);
        }        
    }
    
}
